1. create one ec2 from your aws account and login from your local machine using ssh client(putty/gitbash/terminal)
    os:  ubuntu22
    type: t2.micro

2. create jenkins server using docker.
        docker run -itd -p 8080:8080 jenkins/jenkins:lts

3. create maven type job in Jenkins, install maven through jenkins tools, ensure maven job should to build.


4. create nexus and jenkins servers with docker

5. cretae pipelines jobs with Jenkinsfile
6. run docker start command using @reboot with crontab commnd.
    crontab -e
     @reboot /usr/bin/sh /home/ubuntu/start.sh
7. prepare webhook to trigeer jenkins job based on push event. 
    
   endpoint url example: 
   http://devops:1126fb92da6436191d374be463f8196be7@18.204.3.47:8080/job/webapp-pipeline/build?token=jshbvchgvchgvghcv

8. Authenticate for ssh git  url with keys:
    git@github.com:socgenaws/webapp.git

     ssh-keygen
      id_rsa  ==> jenkins
      id_rsa.pub ==> github
9. Configure jenkins agent on jenkins master.
    create ec2 for jenkins agent
    create directory and install jdk11 in agent
    add new node in Jenkins master from manage jenkins ==> node  
    add provate key
    enter all required details
    ensure executros are up andrunning.

10. add cloud agent for dynamic agent creation.
        install aws ec2 plugin.

11. setup sonarqube server:
      docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:lts
12. integrate sonarqube with jwenkins job  using Jenkinsfile

    steps:
        1. install sonarqube plugin and configure with sonarqube server url  and token.
        2. add stage in jenkinsfile
             stage('SonarQube Analysis') {
                    steps {
                      withSonarQubeEnv('sonar') {
                          sh "mvn clean verify sonar:sonar -Dsonar.projectKey=myapp"
                      }
                    }
                }
13. add dynamic agent using aws ec2 instance using Jenklins cloud plugin. 

14. create postgres database using docker with out volume, connect db and insert some data.
       ref:  https://hub.docker.com/_/postgres
      245  docker run -v postgresvol:/var/lib/postgresql/data --name mypostgres -e POSTGRES_PASSWORD=mysecretpassword -itd postgres
      246  docker inspect mypostgres
      247  docker run -it --link mypostgres --rm postgres psql -h mypostgres -U postgres

15. create jenkins container with docker volume (mount path: /var/jenkins)
   docker volume create jenkins-data
   docker run -itd -p 8080:8080 --name jenkins -v jenkins-data:/var/jenkins_home jenkins/jenkins:lts

16. how to assign hostname to docker container

